---
name: CI

"on":
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  GO_VERSION: '1.25.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      rabbitmq:
        image: rabbitmq:3-management-alpine
        ports:
          - 5672:5672
          - 15672:15672
        env:
          RABBITMQ_DEFAULT_USER: guest
          RABBITMQ_DEFAULT_PASS: guest
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping"
          --health-interval 30s
          --health-timeout 30s
          --health-retries 3

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Go
        run: |
          wget -q https://go.dev/dl/go${{ env.GO_VERSION }}.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf go${{ env.GO_VERSION }}.linux-amd64.tar.gz
          echo "/usr/local/go/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: make deps

      - name: Install golangci-lint v2.5.0
        run: |
          curl -sSfL https://github.com/golangci/golangci-lint/releases/download/v2.5.0/golangci-lint-2.5.0-linux-amd64.tar.gz | \
          sudo tar -xz -C /usr/local/bin --strip-components=1 golangci-lint-2.5.0-linux-amd64/golangci-lint

      - name: Format check
        run: |
          make fmt
          git diff --exit-code

      - name: Vet
        run: make vet

      - name: Lint
        run: make lint

      - name: Unit tests
        run: make test-unit

      - name: Integration tests
        run: make test-integration || echo "No integration tests found"
        env:
          RABBITMQ_URL: amqp://guest:guest@localhost:5672/

      - name: Test coverage
        run: make test-coverage || echo "No coverage data generated"

      - name: Upload coverage to Codecov
        if: hashFiles('coverage.out') != ''
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage.out
          flags: unittests
          name: codecov-umbrella

      - name: Security scan
        run: make security-scan || echo "No security scanner available"
        continue-on-error: true

      - name: Build plugin
        run: make build-plugin

      - name: Build for multiple architectures
        run: make build-all

  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'pull_request'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Go
        run: |
          wget -q https://go.dev/dl/go${{ env.GO_VERSION }}.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf go${{ env.GO_VERSION }}.linux-amd64.tar.gz
          echo "/usr/local/go/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: make deps

      - name: Build plugin
        run: make build-plugin

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}

      - name: Build and push custom Fluent Bit image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./build/fluent-bit/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max