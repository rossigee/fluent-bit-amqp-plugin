---
name: Release

"on":
  push:
    tags:
      - 'v*'

env:
  GO_VERSION: '1.25.1'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Go
        run: |
          wget -q https://go.dev/dl/go${{ env.GO_VERSION }}.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go
          sudo tar -C /usr/local -xzf go${{ env.GO_VERSION }}.linux-amd64.tar.gz
          echo "/usr/local/go/bin" >> $GITHUB_PATH

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            network=host

      - name: Install dependencies
        run: make deps

      - name: Install golangci-lint v2.5.0
        run: |
          curl -sSfL https://github.com/golangci/golangci-lint/releases/download/v2.5.0/golangci-lint-2.5.0-linux-amd64.tar.gz | \
          sudo tar -xz -C /usr/local/bin --strip-components=1 golangci-lint-2.5.0-linux-amd64/golangci-lint

      - name: Install gosec
        run: |
          curl -sSfL https://github.com/securecodewarrior/gosec/releases/download/v2.21.4/gosec_2.21.4_linux_amd64.tar.gz | \
          sudo tar -xz -C /usr/local/bin gosec

      - name: Validate code
        run: make validate

      - name: Build plugin for multiple architectures
        run: make build-all

      - name: Security scan (non-blocking)
        run: |
          make security-scan || echo "Security scan completed with findings"

      - name: Create release artifacts
        run: |
          make release-local
          VERSION=${GITHUB_REF_NAME#v}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set build date
        id: date
        run: echo "date=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-init
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push init container image
        uses: docker/build-push-action@v6
        timeout-minutes: 30
        with:
          context: .
          file: ./build/init-container/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Generate changelog
        run: |
          if git describe --tags --abbrev=0 HEAD~1 >/dev/null 2>&1; then
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1)
            echo "## Changes since $PREVIOUS_TAG" > CHANGELOG.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
          else
            echo "## Release ${{ github.ref_name }}" > CHANGELOG.md
            echo "Fluent Bit AMQP CloudEvents output plugin" >> CHANGELOG.md
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          body_path: CHANGELOG.md
          files: |
            dist/binaries/*
          draft: false
          prerelease: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}

      - name: Update latest tag
        if: ${{ !contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta') && !contains(github.ref_name, 'rc') }}
        run: |
          git tag -f latest
          git push origin --force --tags